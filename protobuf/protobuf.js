/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!


goog.provide('proto.xmlManager.message');
goog.provide('proto.xmlManager.recipient');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xmlManager.message = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xmlManager.message, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xmlManager.message.displayName = 'proto.xmlManager.message';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xmlManager.message.prototype.toObject = function(opt_includeInstance) {
  return proto.xmlManager.message.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xmlManager.message} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xmlManager.message.toObject = function(includeInstance, msg) {
  var f, obj = {
    generalData: jspb.Message.getField(msg, 1),
    name: jspb.Message.getField(msg, 2),
    age: jspb.Message.getField(msg, 3),
    address: jspb.Message.getField(msg, 4),
    disabilities: jspb.Message.getField(msg, 5),
    cycle: jspb.Message.getField(msg, 6),
    crossCountrySki: jspb.Message.getField(msg, 7),
    alpineSki: jspb.Message.getField(msg, 8),
    snowboard: jspb.Message.getField(msg, 9),
    snBackend: (f = msg.getSnBackend()) && proto.xmlManager.recipient.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xmlManager.message}
 */
proto.xmlManager.message.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xmlManager.message;
  return proto.xmlManager.message.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xmlManager.message} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xmlManager.message}
 */
proto.xmlManager.message.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGeneralData(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAge(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAddress(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDisabilities(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCycle(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCrossCountrySki(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAlpineSki(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSnowboard(value);
      break;
    case 10:
      var value = new proto.xmlManager.recipient;
      reader.readMessage(value,proto.xmlManager.recipient.deserializeBinaryFromReader);
      msg.setSnBackend(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xmlManager.message.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xmlManager.message.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xmlManager.message} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xmlManager.message.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = message.getSnBackend();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.xmlManager.recipient.serializeBinaryToWriter
    );
  }
};


/**
 * optional string general_data = 1;
 * @return {string}
 */
proto.xmlManager.message.prototype.getGeneralData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.xmlManager.message.prototype.setGeneralData = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.xmlManager.message.prototype.clearGeneralData = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.xmlManager.message.prototype.hasGeneralData = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.xmlManager.message.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.xmlManager.message.prototype.setName = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.xmlManager.message.prototype.clearName = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.xmlManager.message.prototype.hasName = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 age = 3;
 * @return {number}
 */
proto.xmlManager.message.prototype.getAge = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.xmlManager.message.prototype.setAge = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.xmlManager.message.prototype.clearAge = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.xmlManager.message.prototype.hasAge = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int32 address = 4;
 * @return {number}
 */
proto.xmlManager.message.prototype.getAddress = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.xmlManager.message.prototype.setAddress = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.xmlManager.message.prototype.clearAddress = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.xmlManager.message.prototype.hasAddress = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int32 disabilities = 5;
 * @return {number}
 */
proto.xmlManager.message.prototype.getDisabilities = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.xmlManager.message.prototype.setDisabilities = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.xmlManager.message.prototype.clearDisabilities = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.xmlManager.message.prototype.hasDisabilities = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional int32 cycle = 6;
 * @return {number}
 */
proto.xmlManager.message.prototype.getCycle = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.xmlManager.message.prototype.setCycle = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.xmlManager.message.prototype.clearCycle = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.xmlManager.message.prototype.hasCycle = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional int32 cross_country_ski = 7;
 * @return {number}
 */
proto.xmlManager.message.prototype.getCrossCountrySki = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.xmlManager.message.prototype.setCrossCountrySki = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.xmlManager.message.prototype.clearCrossCountrySki = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.xmlManager.message.prototype.hasCrossCountrySki = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional int32 alpine_ski = 8;
 * @return {number}
 */
proto.xmlManager.message.prototype.getAlpineSki = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.xmlManager.message.prototype.setAlpineSki = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.xmlManager.message.prototype.clearAlpineSki = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.xmlManager.message.prototype.hasAlpineSki = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional int32 snowboard = 9;
 * @return {number}
 */
proto.xmlManager.message.prototype.getSnowboard = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.xmlManager.message.prototype.setSnowboard = function(value) {
  jspb.Message.setField(this, 9, value);
};


proto.xmlManager.message.prototype.clearSnowboard = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.xmlManager.message.prototype.hasSnowboard = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional recipient sn_backend = 10;
 * @return {?proto.xmlManager.recipient}
 */
proto.xmlManager.message.prototype.getSnBackend = function() {
  return /** @type{?proto.xmlManager.recipient} */ (
    jspb.Message.getWrapperField(this, proto.xmlManager.recipient, 10));
};


/** @param {?proto.xmlManager.recipient|undefined} value */
proto.xmlManager.message.prototype.setSnBackend = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};


proto.xmlManager.message.prototype.clearSnBackend = function() {
  this.setSnBackend(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.xmlManager.message.prototype.hasSnBackend = function() {
  return jspb.Message.getField(this, 10) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xmlManager.recipient = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xmlManager.recipient, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.xmlManager.recipient.displayName = 'proto.xmlManager.recipient';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xmlManager.recipient.prototype.toObject = function(opt_includeInstance) {
  return proto.xmlManager.recipient.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xmlManager.recipient} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xmlManager.recipient.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: jspb.Message.getField(msg, 1),
    port: jspb.Message.getField(msg, 2),
    pubkey: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xmlManager.recipient}
 */
proto.xmlManager.recipient.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xmlManager.recipient;
  return proto.xmlManager.recipient.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xmlManager.recipient} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xmlManager.recipient}
 */
proto.xmlManager.recipient.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPort(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPubkey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xmlManager.recipient.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xmlManager.recipient.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xmlManager.recipient} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xmlManager.recipient.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string address = 1;
 * @return {string}
 */
proto.xmlManager.recipient.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.xmlManager.recipient.prototype.setAddress = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.xmlManager.recipient.prototype.clearAddress = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.xmlManager.recipient.prototype.hasAddress = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 port = 2;
 * @return {number}
 */
proto.xmlManager.recipient.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.xmlManager.recipient.prototype.setPort = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.xmlManager.recipient.prototype.clearPort = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.xmlManager.recipient.prototype.hasPort = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string pubkey = 3;
 * @return {string}
 */
proto.xmlManager.recipient.prototype.getPubkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.xmlManager.recipient.prototype.setPubkey = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.xmlManager.recipient.prototype.clearPubkey = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.xmlManager.recipient.prototype.hasPubkey = function() {
  return jspb.Message.getField(this, 3) != null;
};


